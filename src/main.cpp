  #include <Arduino.h>
  #include <SPI.h>

  #include "ESP8266WiFi.h"       // Built-in
  #include "ESP8266WebServer.h"  // Built-in

  #include "FS.h"
  #include "CSS.h"
  #include "html.h"
  #include "MY_spiffs.h"
  #include "main.h"
 
  // define Pins
  #define LED 5
  #define LED_ON HIGH
  #define LED_OFF LOW

  bool led_state= LED_ON;

  #define nSEN 12
  #define nOE 2
  #define nWE 4

  //#define MCLK 14
  //#define MOSI 13

  #define CPLD_MUX 16
  #define ADDRESS_ESP_TO_SRAM HIGH
  #define ADDRESS_PCB_TO_SRAM LOW

  #define WR 15
  #define WRITE_TO_SRAM HIGH
  #define READ_FROM_SRAM LOW


  #define SPI_SPEED 1000000

  #define MELODY_LENGTH 512

  #define TWO_POWER_18 262144

  char melody[MELODY_LENGTH];
  char mel_test[MELODY_LENGTH] = {0x38, 0x3F, 0x3F, 0x30, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 
                                  0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00,
                                  0x6E, 0x00, 0x00, 0x6E, 0x6E, 0x00, 0x00, 0x6E, 0x6E, 0x00, 0x00, 0x6E, 0x6E, 0x00, 0x00, 0x6E, 
                                  0x6E, 0x00, 0x00, 0x6E, 0x6E, 0x00, 0x00, 0x6E, 0x6E, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00,
                                  0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 
                                  0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00,
                                  0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 
                                  0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00,
                                  0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 
                                  0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00,
                                  0x6E, 0x00, 0x00, 0x6E, 0x6E, 0x00, 0x00, 0x6E, 0x6E, 0x00, 0x00, 0x6E, 0x6E, 0x00, 0x00, 0x6E, 
                                  0x6E, 0x00, 0x00, 0x6E, 0x6E, 0x00, 0x00, 0x6E, 0x6E, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 
                                  0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 
                                  0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 
                                  0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 
                                  0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00,
                                  0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 
                                  0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00,
                                  0x5D, 0x00, 0x00, 0x5D, 0x5D, 0x00, 0x00, 0x5D, 0x5D, 0x00, 0x00, 0x5D, 0x5D, 0x00, 0x00, 0x5D, 
                                  0x5D, 0x00, 0x00, 0x5D, 0x5D, 0x00, 0x00, 0x5D, 0x5D, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x00,
                                  0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 
                                  0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x00, 
                                  0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 
                                  0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x00,
                                  0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 
                                  0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00,
                                  0x5D, 0x00, 0x00, 0x5D, 0x5D, 0x00, 0x00, 0x5D, 0x5D, 0x00, 0x00, 0x5D, 0x5D, 0x00, 0x00, 0x5D, 
                                  0x5D, 0x00, 0x00, 0x5D, 0x5D, 0x00, 0x00, 0x5D, 0x5D, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x00,
                                  0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 
                                  0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 
                                  0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 
                                  0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x52, 0xFF, 0xFF, 0xFF, 0xFF};

                          /*
                          0x52, 0x00, 0x00, 0x52, 0x52, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                          0x4A, 0x00, 0x00, 0x4A, 0x4A, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x52, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                          0x5D, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x62, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 
                          0x62, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x52, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                          0x4A, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x52, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                          0x5D, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x62, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 
                          0x62, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0xA5, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00, 
                          0xA5, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C,
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0xA5, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00, 
                          0xA5, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 
                          0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF};
  */
  void initialize_melody(){
  uint16_t j;
    
    for (j=0; j< MELODY_LENGTH; j++){
      melody[j]=mel_test[j];
    }
  //	load_notes();		// if spiffs fails we have only first melody as in const data
  }                      

  uint32_t concatenate( char data_in, uint32_t address){
    uint32_t data;
    uint32_t out;
    data = data_in;
    data = data << 18;
    out = data | address;
    return out;
  }
  void test_sram(uint32_t address, uint32_t lenght){
    char dummy = 0x00;
    uint32_t cpld_data;
    uint32_t j;
    char transfer;
    digitalWrite(CPLD_MUX, ADDRESS_ESP_TO_SRAM);
    digitalWrite(WR, READ_FROM_SRAM);
    for(j=0; j<lenght; j++){
      cpld_data = concatenate(dummy, address);
      transfer  = cpld_data>>24 & 0xFF;
      SPI.transfer(transfer);
      transfer  = cpld_data>>16 & 0xFF;
      SPI.transfer(transfer);
      transfer  = cpld_data>>8 & 0xFF;
      SPI.transfer(transfer);
      transfer  = cpld_data & 0xFF;
      SPI.transfer(transfer);
      address++;
      digitalWrite(LED, led_state);
      if(led_state == LED_ON){
        led_state = LED_OFF;
      }
      else{
        led_state = LED_ON;
      }
      delayMicroseconds(1);
    }
  }

  void write_sram( char *melody, uint32_t address, uint32_t lenght){
    uint32_t cpld_data;
    uint32_t j;
    char transfer;
  //      digitalWrite(LED, LOW);
  for(j=0; j<lenght; j++){
      cpld_data = concatenate(melody[j], address);
  //    digitalWrite(LED, LOW);
  //    Serial.println(cpld_data);
  //        delayMicroseconds(10);
      transfer  = cpld_data>>24 & 0xFF;
  //   Serial.println(transfer);
  //       delayMicroseconds(10);
      SPI.transfer(transfer);
      transfer  = cpld_data>>16 & 0xFF;
  //   Serial.println(transfer);
  //       delayMicroseconds(10);
      SPI.transfer(transfer);
      transfer  = cpld_data>>8 & 0xFF;
  //    Serial.println(transfer);
  //       delayMicroseconds(10);
      SPI.transfer(transfer);
      transfer  = cpld_data & 0xFF;
  //    Serial.println(transfer);
  //       delayMicroseconds(10);
      SPI.transfer(transfer);

  //    transfer  = cpld_data>>24;
  //    SPI.transfer(transfer);

  //   digitalWrite(LED, HIGH);
  //   delayMicroseconds(10);
            digitalWrite(nWE, LOW);
      delayMicroseconds(1);
            digitalWrite(nWE, HIGH);
  //    delayMicroseconds(10);
  //          digitalWrite(WR, READ_FROM_SRAM);
  //    delayMicroseconds(100);
  //          digitalWrite(WR, WRITE_TO_SRAM);
      address++;
    }
    //   digitalWrite(LED, HIGH);

  }
  void setup() {

    Serial.begin(115200);          // Start the Serial communication to send messages to the computer
    Serial.println("start");

    pinMode(LED, OUTPUT);
    digitalWrite(LED, LED_ON);

    pinMode(nSEN, OUTPUT);
    digitalWrite(nSEN, LOW);

    pinMode(nOE, OUTPUT);
    digitalWrite(nOE, LOW);

    pinMode(nWE, OUTPUT);
    digitalWrite(nWE, HIGH);

    pinMode(CPLD_MUX, OUTPUT);
    digitalWrite(CPLD_MUX, ADDRESS_ESP_TO_SRAM);

    pinMode(WR, OUTPUT);
    digitalWrite(WR, WRITE_TO_SRAM);

    //pinMode(MCLK, OUTPUT);
    //pinMode(MOSI, OUTPUT);

    initialize_melody();
    SPI.begin();
  // SPI.beginTransaction(SPISettings(SPI_SPEED, MSBFIRST, SPI_MODE0));
  //SPI.setup(id, mode, cpol, cpha, databits, clock_div[, duplex_mode]);
    //digitalWrite(LED, LED_ON);
    write_sram(melody, 0, MELODY_LENGTH );
    //digitalWrite(LED, LED_OFF);

    digitalWrite(CPLD_MUX, ADDRESS_PCB_TO_SRAM);
    digitalWrite(WR, READ_FROM_SRAM);

  //  SPI.endTransaction();
  //test

      digitalWrite(nOE, LOW); // SRAM output enable 

  }

  void loop() {
    // put your main code here, to run repeatedly:
    //delay(1);
  //  test_sram(0, 512);
    delay(1);
  }


